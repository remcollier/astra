import astra.unit.TestSuite;
import astra.unit.UnitTest;

agent Core extends astra.unit.ASTRAUnitTest {
	module Console C;
	module System S;
	module MyModule M;
		
	types test {
		formula timed_out();
		formula timed_out(string);
		formula test(object);
	}

	rule +!test_maintain(TestSuite suite) {
		+timed_out();
		C.println("before");
		maintain(timed_out()) {
			C.println("in");
		}
		C.println("after");
	}

	rule +!test_maintain_failed(TestSuite suite) {
		+timed_out();
		maintain(timed_out()) {
			C.println("before");
			-timed_out();
			C.println("after");
		}
	}

	rule +!test_hello(TestSuite suite) {
		C.println("hello");
	}
	
	rule +!test_beliefevent(TestSuite suite) {
		+test(suite);
	}
	
	rule +test(TestSuite suite) {
		UT.success(suite);
	}
	
	rule +!test_fail(TestSuite suite) {
		S.fail();
	}
	
	rule +!test_recovered_failure(TestSuite suite) {
		try {
			S.fail();
		} recover {
			UT.success(suite);
		}
	}
	
	rule +!test_assignment(TestSuite suite) {
		int Y = 5;
		UT.assertEquals(suite, Y, 5);
	}
	
	rule +!test_subgoal_assignment(TestSuite suite) {
		!subgoal(int X);
		UT.assertEquals(suite, X, 5);
	}
	
	rule +!subgoal(returns int Y) {
		Y = 5;
	}
	
	rule +!test_actionparam(TestSuite suite) {
		M.get(long Y);
		UT.assertEquals(suite, Y, 5l);
	}
	
	rule +!test_modterm(TestSuite suite) {
		UT.assertEquals(suite, M.answer(), "happy");
	}
	
	rule +!test_wait(TestSuite suite) {
		!!timeout(1000);
		C.println("waiting...");
		wait(timed_out());
		C.println("done");
	}
	
	rule +!timeout(int time) {
		C.println("Starting timeout...");
		S.sleep(time);
		C.println("Timed out...");
		+timed_out();
		-timed_out();
	}

	rule +!timeout(int time, string X) {
		S.sleep(time);
		+timed_out(X);
		-timed_out();
	}

	rule +!test_wait2(TestSuite suite) {
		!!timeout(1000, "A");
		C.println("waiting...");
		wait(timed_out(string X));
		C.println("done: " + X);
		UT.assertEquals(suite, X, "A");
	}

}