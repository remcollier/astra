package astra.http;

import astra.util.DB;
import astra.netty.Http;
import io.netty.channel.ChannelHandlerContext;
import io.netty.handler.codec.http.FullHttpRequest;

agent TestController {
	module Http http;
	module Console C;
	module System S;
	module Prelude P;
	
	types example {
		formula registration(string, string);
	}
	
	initial registration("rcollier", "passw0rd");
	
	rule +!main(list args) {
		http.setup();
		http.register();
		http.exportFolder("/view", "view");
	}
	
	rule +!test2("GET", ChannelHandlerContext ctx, FullHttpRequest req, list args) {
		http.loadView(ctx, req, "/Hello.html");
	}

	rule +!test3("GET", ChannelHandlerContext ctx, FullHttpRequest req, list args) {
		http.sendJSON(ctx, req, is([happy("rem"), "bob"]));
	}

	rule +!validate("POST", ChannelHandlerContext ctx, FullHttpRequest req, list args, list fields) {
		!validateUser(P.stringValueFor(fields, "username"),P.stringValueFor(fields, "password"), funct response);
		http.sendJSON(ctx, req, response);
	}
	
	rule +!validateUser(string U, string P, returns funct response) {
		try {
			query(registration(U, string Password));
			if (P == Password) {
				response = response(result("OK"));
			} else {
				response = response(result("FAILED"), reason("Incorrect Password for User: " + U));
			}
		} recover {
			response = response(result("FAILED"), reason("No Such User: " + U));
		}
	}
	
	rule +!register("POST", object<ChannelHandlerContext> ctx, object<FullHttpRequest> req, list args, list fields) {
		string U = P.stringValueFor(fields, "username");
		
		if (registration(U, string Password)) {
			http.sendJSON(ctx, req, [result("FAILED"), reason("Duplicate User: " + U)]);
		} else {
			string P = P.stringValueFor(fields, "password");
			+registration(U, P);
			http.sendJSON(ctx, req, [result("OK")]);
		}
	}
}
